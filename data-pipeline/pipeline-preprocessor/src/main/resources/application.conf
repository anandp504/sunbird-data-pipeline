
kafka {
  input.topic = "k8s.telemetry.raw"
  output.success.topic = "k8s.telemetry.unique.flink"
  output.failed.topic = "k8s.telemetry.failed.flink"
  output.primary.route.topic = "k8s.telemetry.sink.flink"
  output.secondary.route.topic = "k8s.telemetry.log.flink"
  output.audit.route.topic = "k8s.telemetry.audit.flink"
  output.duplicate.topic = "k8s.telemetry.duplicate.flink"
  output.malformed.topic = "k8s.telemetry.malformed.flink"
  # broker-servers = "172.16.0.239:9092"
  # zookeeper = "172.16.0.239:2181"
  # dev-environment
  broker-servers = "11.2.1.15:9092"
  zookeeper = "11.2.1.15:2181"
  groupId = "pipeline-preprocessor-group"
}

task {
  parallelism = 3
  checkpointing.interval = 60000
}

telemetry.schema.path="schemas/telemetry/3.0"
router.secondary.routes.eid = ["LOG", "ERROR"]
default.channel="default_channel"
dedup.producer.included.ids = ["prod.diksha.portal", "prod.sunbird.desktop"]

redis {
  # host = 172.16.0.239
  # dev-environment
  host = 11.2.4.22
  port = 6379
  connection {
    max = 2
    idle.min = 1
    idle.max = 2
    minEvictableIdleTimeSeconds = 120
    timeBetweenEvictionRunsSeconds = 300
  }
  database {
    duplicationstore.id = 12
    key.expiry.seconds = 3600
  }
}